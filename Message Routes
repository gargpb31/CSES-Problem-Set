#include <bits/stdc++.h>
using namespace std;
#define loop(i,a,b) for(int i=a; i<b; i++)
#define endl "\n" 
#define _HARE_KRISHNA_  signed main(){
#define _HARE_KRISHNA return 0;}
#define JAI_SHREE_RAM     ios::sync_with_stdio(false);
#define gargpb31     cin.tie(NULL);cout.tie(NULL);
#define in(a,n) loop(i, 0, n) cin >> a[i];
#define pb push_back
#define ppb pop_back
#define mpi map<int, int>
#define mps map<string, int>
#define vec   vector<int>  
#define vec2 vector<vector<int>>
#define sort(v) sort(v.begin(),v.end());
#define re(v) reverse(v.begin(),v.end());
#define inn(n) int n; cin >> n;
#define str(s) string s; cin >> s;
#define ff first
#define ss second
#define debug(a) for(auto &i : a) cout << i << " "; cout << "\n";
#define ld long double
#define prii(x) {cout<<x<<endl;return;}
#define print(s) cout<<(s)<<endl;
//o_set.order_of_key(a), return number of elements strictly less than a
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;
//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> os;
//typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> oms;
//#define ordered_set tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
#define int long long

//CODE 
void sunnygarg(){
       inn(n) inn(m)
       vector<vector<int> > graph(n+1);
       
       while(m--){
        inn(l) inn(r)
        graph[l].push_back(r);
        graph[r].pb(l);
       }

       vector<int> visited(n+1,0);
       map<int,int> m1;

       queue<int> q;
       visited[1]=1;
       q.push(1);
       while(!q.empty()){
        int x = q.front();

        q.pop();

        for(auto it : graph[x]){
            if(visited[it]==0){
                visited[it]=1;
                m1[it]=x;
                q.push(it);
            }
        }

       }
       if(visited[n]==0){
        prii("IMPOSSIBLE")
       }

       vector<int> ans;

       int g = n;
       ans.push_back(g);
       while(g!=1){
        g=m1[g];
        ans.pb(g);
       }
       print(ans.size());
       re(ans)
       debug(ans)

       
}
//------------------------------------------------------------------------------------------------------------------


_HARE_KRISHNA_

    JAI_SHREE_RAM
    gargpb31

      sunnygarg();  
_HARE_KRISHNA
